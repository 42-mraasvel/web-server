-- Usage --

	./run.sh [authority] [TAGS]
		- authority = host [ ':' port ]
		- TAGS = names of the TestCases to execute (all if missing)

	More details on errors are logged to `result.log`

-- Webserver's Configuration --

	Location block for '/' that has ServerRoot as it's root directory

-- Adding New Testcases --

	-- TestCase Class Members --

		- TestCase (class):
			request (class):
				method (string)
				target (string, request_target)
				headers (dictionary)
				body (bytes, NOT string)

			response (class):
				status_code (int)
					- used as expected status code (IF NOT 0)
				headers (dict)
					- each key:value pair will be checked if present in the response headers
				expect_body (boolean)
					- True: will compare body, False: won't compare body
				body (bytes)
					- Compared to the response body

			tag (string)
				- string variable representing the tag (for printing and specifying which case to execute)
	
			evaluator (function pointer)
				- custom input function to evaluate the response
				- prototype: def evaluator(response):
				- return: `None` on PASS, string specifying reason on FAIL

	DIRECTORY: 'src/testcase_generation
	Add new `.py` files here:
		- Any function with the prefix `testCase` should return a TestCase object,
		which will be automatically added to the executed testcases

	-- Adding TestCases from a file --

		- Can write a file `x.txt + x.txt.response` inside of the `Requests` directory (see examples)
		- This will be parsed automatically and added as TestCase
		- Beware that you need 2 newlines to end a header field (otherwise it won't be parsed)

-- API used --

	https://docs.python-requests.org/en/latest/api/

-- Dependencies --

	- python3
	- Requests module
		`python -m pip install requests`